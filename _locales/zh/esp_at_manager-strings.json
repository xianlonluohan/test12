{
    "emakefun.createEspAtManager|block": "创建ESP-AT模块实例， TX %tx_pin RX %rx_pin 波特率 %baud_rate",
    "emakefun.EspAtManager.restart|block": "%this 重启ESP-AT模块， 超时%timeout_ms 毫秒",
    "emakefun.EspAtManager.cancelSend|block": "%this 取消发送",
    "emakefun.EspAtManager.wifiConnect|block": "%this 连接WiFi: SSID %ssid 密码 %password",
    "emakefun.EspAtManager.getIpInfo|block": "%this 获取WiFi的IP信息",
    "emakefun.EspAtManager.getMac|block": "%this 获取WiFi的MAC地址",
    "emakefun.EspAtManager.getApInfo|block": "%this 获取WiFi的AP信息",
    "emakefun.EspAtManager.mqttUserConfig|block": "%this MQTT设置用户属性， 连接方案 %scheme 客户端ID %client_id 用户名 %username 密码 %password 资源路径 %path",
    "emakefun.EspAtManager.mqttConnect|block": "%this MQTT连接服务器， 主机 %host 端口 %port 重连 %reconnect",
    "emakefun.EspAtManager.mqttPublish|block": "%this MQTT发布消息 %data 到主题 %topic， QoS %qos 保留 %retain 超时 %timeout_ms 毫秒",
    "emakefun.EspAtManager.mqttSubscribe|block": "%this MQTT订阅 %topic， QoS %qos",
    "emakefun.EspAtManager.mqttUnsubscribe|block": "%this MQTT取消订阅主题 %topic",
    "emakefun.EspAtManager.mqttDisconnect|block": "%this MQTT断开连接",
    "emakefun.EspAtManager.mqttReceive|block": "%this 接收MQTT消息， 超时 %timeout_ms",
    "emakefun|block": "Emakefun",
    "{id:category}Emakefun": "Emakefun",
    "{id:subcategory}EspAtManager": "EspAtManager",
    "{id:group}Manager": "管理器",
    "{id:group}WiFi": "WiFi",
    "{id:group}MQTT": "MQTT",
    "emakefun.ConnectionScheme.kMqttOverTcp|block": "TCP",
    "emakefun.ConnectionScheme.kMqttOverTlsNoVerify|block": "TLS (不验证证书)",
    "emakefun.ConnectionScheme.kMqttOverTlsVerifyServerCert|block": "TLS (验证服务器证书)",
    "emakefun.ConnectionScheme.kMqttOverTlsProvideClientCert|block": "TLS (提供客户端证书)",
    "emakefun.ConnectionScheme.kMqttOverTlsMutualVerify|block": "TLS (双向验证)",
    "emakefun.ConnectionScheme.kMqttOverWebSocket|block": "WebSocket (基于TCP)",
    "emakefun.ConnectionScheme.kMqttOverWebSocketSecureNoVerify|block": "WebSocket (基于TLS，不验证证书)",
    "emakefun.ConnectionScheme.kMqttOverWebSocketSecureVerifyServerCert|block": "WebSocket (基于TLS，验证服务器证书)",
    "emakefun.ConnectionScheme.kMqttOverWebSocketSecureProvideClientCert|block": "WebSocket (基于TLS，提供客户端证书)",
    "emakefun.ConnectionScheme.kMqttOverWebSocketSecureMutualVerify|block": "WebSocket (基于TLS，双向验证)"
}